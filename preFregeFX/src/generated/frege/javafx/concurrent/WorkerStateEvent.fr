data WorkerStateEvent = mutable native javafx.concurrent.WorkerStateEvent where

  native any "javafx.concurrent.WorkerStateEvent.ANY" :: IO (EventType WorkerStateEvent)
  native worker_state_ready "javafx.concurrent.WorkerStateEvent.WORKER_STATE_READY" :: IO (EventType WorkerStateEvent)
  native worker_state_scheduled "javafx.concurrent.WorkerStateEvent.WORKER_STATE_SCHEDULED" :: IO (EventType WorkerStateEvent)
  native worker_state_running "javafx.concurrent.WorkerStateEvent.WORKER_STATE_RUNNING" :: IO (EventType WorkerStateEvent)
  native worker_state_succeeded "javafx.concurrent.WorkerStateEvent.WORKER_STATE_SUCCEEDED" :: IO (EventType WorkerStateEvent)
  native worker_state_cancelled "javafx.concurrent.WorkerStateEvent.WORKER_STATE_CANCELLED" :: IO (EventType WorkerStateEvent)
  native worker_state_failed "javafx.concurrent.WorkerStateEvent.WORKER_STATE_FAILED" :: IO (EventType WorkerStateEvent)

  native new :: Worker -> EventType WorkerStateEvent -> IO WorkerStateEvent

  native getSource :: WorkerStateEvent -> IO Worker

derive Serializable WorkerStateEvent

