module fregefx.javafx.event.Event where

data Event = mutable native javafx.event.Event where
  native null_source_target "javafx.event.Event.NULL_SOURCE_TARGET" :: IO EventTarget
  native any "javafx.event.Event.ANY" :: IO (EventType Event)
  native new :: EventType Event -> IO Event
              | Object -> EventTarget -> EventType Event -> IO Event
  native clone :: Event -> IO Object
  native consume :: Event -> IO ()    -- here is mutable state introduced!
  native copyFor :: Event -> Object -> EventTarget -> IO Event
  native fireEvent "javafx.event.Event.fireEvent" :: EventTarget -> Event -> IO ()
  native getEventType :: Event -> IO (EventType Event)
  native getTarget :: Event -> IO EventTarget
  native isConsumed :: Event -> IO Bool
--derive Serializable Event

data EventDispatchChain = mutable native javafx.event.EventDispatchChain where
  native append :: EventDispatchChain -> EventDispatcher -> IO EventDispatchChain
  native dispatchEvent :: EventDispatchChain -> Event -> IO Event
  native prepend :: EventDispatchChain -> EventDispatcher -> IO EventDispatchChain

data EventDispatcher = mutable native javafx.event.EventDispatcher where
  native dispatchEvent :: EventDispatcher -> Event -> EventDispatchChain -> IO Event

data EventTarget = mutable native javafx.event.EventTarget where
  native buildEventDispatchChain :: EventTarget -> EventDispatchChain -> IO EventDispatchChain

data EventType t = mutable native javafx.event.EventType where
  native root "javafx.event.EventType.ROOT" :: IO (EventType Event)
  native new :: EventType t -> String -> IO (EventType t)
              | EventType t -> IO (EventType t)
              | String -> IO (EventType t)
              | () -> IO (EventType t)
  native getName :: EventType t -> IO String
  native getSuperType :: EventType t -> IO (EventType t)
  native toString :: EventType t -> IO String
--derive Serializable (EventType t)
