module org.frege.Application where

import org.frege.JavaFX
import org.frege.AllNodes

main args = do
    mConsole <- MVar.newEmpty            -- for thread coordination, set in showUI thread, start repl when ready
    async do                             -- JavaFX would block the main thread otherwise after launching the UI thread
        FregeFX.launch (showUI mConsole) -- partially applied callback function for the JavaFX starting mechanism
    console <- mConsole.take             -- proceeding in the main thread, wait until console is available
    startRepl console                    -- going into the endless repl loop

showUI :: (MVar GraphicRepl) -> Stage -> IO ()
showUI mConsole stage = do
    content <- fxml "/fregeRepl.fxml"
    scene   <- Scene.new content 800.0 540.0
    stage.setTitle "Frege - purely functional programming for the JVM"
    stage.setScene scene
    Stage.show stage
    inputArea  <- locateTextField scene "#editor"
    outputArea <- locateTextField scene "#repl"
    historyLV  <- locateListView  scene "#historyList"

    items <- historyLV.getItems
    items.add ":help"
    items.add ":type mapM"
    items.add "mapM println [1..100]"
    items.add "fib = 1n : 1n : zipWith (+) fib (tail fib)"

    sm  <- historyLV.getSelectionModel
    sip <- sm.selectedItemProperty
    cl  <- ChangeListener.new (\old \new -> inputArea.setText new)
    sip.addListener cl

    mQueue <- newEmptyMVar
    onClosing mQueue >>= stage.setOnHidden
    keyHandler <- onKeyTyped mQueue stage inputArea outputArea items sm
    scene.setOnKeyTyped keyHandler
    inputArea.setOnKeyTyped keyHandler
    mIn  = newMVar inputArea
    mOut = newMVar outputArea
    console = GraphicRepl mQueue mIn mOut
    mConsole.put console     -- allow the main thread to proceed
    console.writeln welcome
    console.writeln  $ "Press Control (or any other meta key) + Enter to submit.\n" ++ "Enter :help for more details."
    mQueue.put "\"\"" -- evaluate an empty string to hide the initialization time

fxml = FregeFX.fxml "org.frege.Application"

startRepl :: GraphicRepl -> IO ()
startRepl console = do
    let env = ReplEnv.default.{config <- InterpreterConfig.{transformDefs=transformDefs}}
    preludeScript <- readResourceAsString "PreludeRepl.fr"
    let newState = snd $ Interpreter.run (interpret preludeScript) env.config env.state
    println "going into main console loop"
    repl console env.{state=newState} -- first step in endless loop
    return ()

onClosing :: MVar String -> IO KeyEventHandler
onClosing mQueue = WindowEventHandler.new handle where
    handle windowEvent = do
        shutdown -- closing the executor service - just to be clean
        println "let the console close itself"
        mQueue.put ":q"

onKeyTyped :: MVar String -> Stage -> TextArea -> TextArea -> ObservableList -> SelectionModel -> IO KeyEventHandler
onKeyTyped mQueue stage inputArea outputArea items historySelection = KeyEventHandler.new handleKeyEvent where
    handleKeyEvent keyEvent = do
        char <- keyEvent.getCharacter
        meta <- keyEvent.isMetaDown
        scut <- keyEvent.isShortcutDown
        alt  <- keyEvent.isAltDown
        ctrl <- keyEvent.isControlDown
        if   (scut || ctrl || alt || meta)
        then case char of
            "\r" -> doExecute mQueue inputArea items
            "l"  -> loadFile stage inputArea
            "j"  -> selectHistory  items historySelection
            "p"  -> selectPrevious items historySelection
            "n"  -> selectNext     items historySelection
            "b"  -> biggerFont  inputArea outputArea
            "s"  -> smallerFont inputArea outputArea
            _    -> return () -- keyEvent.toString >>= println . show
        else return ()

doExecute :: MVar String ->TextArea -> ObservableList -> IO ()
doExecute mQueue inputArea items = do
    script <- trim <$> inputArea.getText
    when (not . null $ script) $ do
        mapM (mQueue.put) $ lines script                 -- the beef
        items.add script
        inputArea.setText ""
    when (script == ":q") $ System.exit 0

loadFile :: Stage -> TextArea -> IO ()
loadFile stage inputArea = do
    chooser <- FileChooser.new ()
    chooser.setTitle "Load Frege File"
    maybeFile <- chooser.showOpenDialog stage
    case maybeFile of
        Nothing      = return ()
        Just mIoFile = do
            path <- mIoFile.getPath
            inputArea.setText (":l " ++ path)

selectHistory :: ObservableList -> SelectionModel -> IO ()
selectHistory items historySelection = do
    listSize <- items.size
    newIndex = listSize - 1
    historySelection.clearAndSelect newIndex

selectPrevious :: ObservableList -> SelectionModel -> IO ()
selectPrevious items historySelection = do
    oldIndex <- historySelection.getSelectedIndex
    listSize <- items.size
    temp     = oldIndex - 1
    newIndex = if temp < 0 then listSize - 1 else temp
    historySelection.clearAndSelect newIndex

selectNext :: ObservableList -> SelectionModel -> IO ()
selectNext items historySelection = do
    oldIndex <- historySelection.getSelectedIndex
    listSize <- items.size
    temp     = oldIndex + 1
    newIndex = if temp >= listSize then 0 else temp
    historySelection.clearAndSelect newIndex

biggerFont :: TextArea -> TextArea -> IO ()
biggerFont inputArea outputArea = do
    oldFont <- inputArea.getFont
    oldSize <- oldFont.getSize
    newFont <- Font.new (oldSize + 2)
    inputArea.setFont newFont
    outputArea.setFont newFont

smallerFont :: TextArea -> TextArea -> IO ()
smallerFont inputArea outputArea = do
    oldFont <- inputArea.getFont
    oldSize <- oldFont.getSize
    newFont <- Font.new $ if oldSize < 3 then 2 else (oldSize - 2)
    inputArea.setFont newFont
    outputArea.setFont newFont

-- -----------------------------------------------------------------------------

import frege.Version
import Java.Net
import Data.List
import Interpreter.FregeInterpreter
import Compiler.common.CompilerOptions (flagtree)
import Compiler.enums.Flags
import Compiler.types.Global hiding (Message, Severity)
import Compiler.types.Global (Message CompilerMessage, Severity())
import Compiler.types.Positions
import Compiler.types.SourceDefinitions
import Compiler.enums.TokenID
import Compiler.types.SNames
import Compiler.types.ImportDetails
import Compiler.types.Tokens
import Java.Swing
import Java.Awt (Component, ActionListener)
import Java.Util (Scanner, ArrayList, Collection)
import frege.repl.Gui
import frege.Prelude hiding (print)
import frege.Prelude (print pPrint)
import Control.monad.State public(State)
import Control.Concurrent as C

data ReplEnv = ReplEnv
    { lastJavaGenSrc :: Maybe String
    , lastExternalScript :: Maybe String
    , opts :: ReplOpts
    , config :: InterpreterConfig
    , state :: InterpreterState
    }
  where
    default = ReplEnv
      { lastJavaGenSrc = Nothing -- To display last generated Java Source
      , lastExternalScript = Nothing -- To reload last external script
      , opts = replOpts
      , config = InterpreterConfig.default
      , state = InterpreterState InterpreterClassLoader.default
      }
    replOpts = ReplOpts.default


data ReplOpts = ReplOpts
    { prompt :: String
    }
  where
    default = ReplOpts
      { prompt = "frege> "
      }


data Repl a = Repl {un :: State ReplEnv a} where
  get = Repl $ State.get
  put s = Repl $ State.put s
  modify f = do
      s <- Repl.get
      Repl.put (f s)
  run (Repl s) env = s.run env
  runWithDefault (Repl s) = s.run ReplEnv.default

instance Monad Repl where
  return = Repl . return
  (Repl state) >>= f = Repl $ state >>= (\a -> Repl.un $ f a)


data ReplResult = ReplInfo [Message]
                | CodeInfo {
                    sourceRepr :: SourceInfo,
                    compilerState :: Global,
                    messages :: [Message]
                  }
                | JavaSource String
                | DocHelp String

repl :: ReplIO a => a -> ReplEnv -> IO ()
repl console env = do
  cmd <- read console env
  let (res, newEnv) = Repl.run (eval cmd) env
  print console cmd res newEnv
  loop console cmd res newEnv

read :: ReplIO a => a -> ReplEnv -> IO Command
read console state = do
   lineMaybe <- console.readline
   maybe (return Quit) readMore lineMaybe
 where
   readAgain = read console state
   readResource path = do
     res <- slurp path
     either (\msg -> console.writeln (show msg) >> readAgain) return res
   readMore line = case Command.parse line of
     Left err -> (console.writeln err) >> readAgain
     Right DefMulti -> readMultiline console >>= (return . Eval)
     Right Reload -> maybe
       (console.writeln "No source to reload!" >> readAgain) readResource state.lastExternalScript
     Right (Load path) -> readResource path
     Right cmd -> return cmd

print :: ReplIO a => a -> Command -> ReplResult -> ReplEnv -> IO ()
print _         Java                (JavaSource src)                _   = javaSourceGUI src
print _         (HelpDoc src)       (DocHelp doc)                   _   = if null doc then return () else helpGUI src doc
print console   _                   (ReplInfo msgs)                 _   = printMessages console msgs
print console   (cmd@(Eval line))   (CodeInfo sourceRepr g msgs)    env = handleEval console cmd line sourceRepr g msgs env
print console   (LoadExternal path script) res                      env = print console (Eval script) res env
print _         _                   _                               _   = return ()

handleEval console cmd line sourceRepr g msgs env = case sourceRepr of
  Expression sym | isVariable g sym = do
    if isString g sym
      then do
        console.interpretSym g sym env
      else do
        let evalShow = do
                        let varDecl = variableDeclScript sym.name.base line
                        when (line /= sym.name.base) $
                          Repl.modify ReplEnv.{config <- InterpreterConfig.{predefs <- ((:) varDecl)}}
                        eval (Eval $ buildShowScript sym.name.base g sym)
        let (res, newEnv) = Repl.run evalShow env
        case res of
          CodeInfo{} -> print console cmd res newEnv
          _ -> printSymbolType console g sym
  Expression sym   = do
    printSymbolType console g sym
  Definitions syms = do
    let symLabels = map (showSymbol g) $ filter (not . Symbol.{alias?}) newSyms
        newSyms = filter (\sym -> sym.pos.line > lineStart) syms
        lineStart = case env.config.predefs of
          [] -> 0
          (_:xs) -> fold (\z \x -> z + length (lines x)) 1 xs
    when (not $ null symLabels) $ console.writeln $ intercalate newLine symLabels
    printMessages console $ filter (\msg -> msg.pos.line > lineStart) msgs
  Module moduleName = do
    console.writeln $ "Module " ++ moduleName
    printMessages console msgs


loop :: ReplIO a => a -> Command -> ReplResult -> ReplEnv -> IO ()       -- looping by mutual recursion
loop console Quit _ _ = return ()
loop console Reset _ _ = repl console ReplEnv.default
loop console _ _ env = repl console env

eval :: Command -> Repl ReplResult
eval (Eval line) = do
  env <- Repl.get
  let (res, newState) = Interpreter.run (interpret line) env.config env.state
  case res of
    InterpreterResult.Success{sourceRepr=sourceRepr, compilerState=g} -> do
      case sourceRepr of
        Module{} -> do
          Repl.modify ReplEnv.{lastJavaGenSrc=Just line, state = newState}
        Definitions{} -> do
          Repl.modify ReplEnv.{lastJavaGenSrc=Nothing, config <- InterpreterConfig.{predefs<-(line:)}}
        Expression{} -> do
          Repl.modify ReplEnv.{lastJavaGenSrc=Just line, state = newState}
      return $ CodeInfo sourceRepr g (Message.fromGlobal g)
    InterpreterResult.Failure messages -> return $ ReplInfo messages

eval (Type expr) = do
  env <- Repl.get
  let res = fst $ Interpreter.run (typeof expr) env.config env.state
  return $ either ReplInfo (\typ -> ReplInfo [Message.info typ]) res

eval (LoadExternal src script) = do
  res <- eval (Eval script)
  case res of
    CodeInfo{} -> Repl.modify ReplEnv.{lastExternalScript=Just src} >> return res
    _ -> return res

eval (BrowseModule moduleName) = do
  env <- Repl.get
  let res = fst $ Interpreter.run (browseModule moduleName) env.config env.state
  return $ maybe (ReplInfo []) (\(syms, g) -> symbolsToReplInfo syms g) res

eval Browse = do
  env <- Repl.get
  let src = unlines $ reverse env.config.predefs
      res = fst $ Interpreter.run (browse src) env.config.{predefs=[]} env.state
  return $ maybe (ReplInfo []) (\(syms, g) -> symbolsToReplInfo syms g) res

eval (HelpDoc name) = do
  env <- Repl.get
  let res = fst $ Interpreter.run (docHelp name) env.config env.state
  return $ either ReplInfo DocHelp res

eval Java = do
  env <- Repl.get
  let javagenDefs [] = return (ReplInfo [Message.info "Empty source!"])
      javagenDefs defs = do
        oldEnv <- Repl.get
        Repl.modify ReplEnv.{config <- InterpreterConfig.{predefs=[]}}
        res <- java (unlines $ reverse defs)
        Repl.put oldEnv
        return res
  maybe (javagenDefs env.config.predefs) (\src -> java src) env.lastJavaGenSrc

eval (Set "v") = parseAndSetCompilerFlag "-v"
eval (Set "hints") = parseAndSetCompilerFlag "-hints"
eval (Set "nowarn") = parseAndSetCompilerFlag "-nowarn"
eval (Set "inline") = parseAndSetCompilerFlag "-inline"
eval (Set "O") = parseAndSetCompilerFlag "-O"
eval (Set "comments") = parseAndSetCompilerFlag "-comments"
eval (Set "ascii") = parseAndSetCompilerFlag "-ascii"
eval (Set "greek") = parseAndSetCompilerFlag "-greek"
eval (Set "fraktur") = parseAndSetCompilerFlag "-fraktur"
eval (Set "latin") = parseAndSetCompilerFlag "-latin"
eval (Set unknown) = return $ ReplInfo [Message.error ("Invalid option: " ++ unknown)]

eval (Unset "v") = clearCompilerFlag Flag.VERBOSE
eval (Unset "hints") = clearCompilerFlag Flag.HINTS
eval (Unset "nowarn") = setCompilerFlag Flag.WARNINGS
eval (Unset "inline") = clearCompilerFlag Flag.INLINE
eval (Unset "O") = clearCompilerFlag Flag.OPTIMIZE
eval (Unset "comments") = clearCompilerFlag Flag.COMMENTS
eval (Unset "ascii") = setCompilerFlag Flag.USEUNICODE
eval (Unset "greek") = clearCompilerFlag Flag.USEGREEK
eval (Unset "fraktur") = clearCompilerFlag Flag.USEFRAKTUR
eval (Unset "latin") = clearCompilerFlag Flag.USEGREEK >> clearCompilerFlag Flag.USEFRAKTUR
eval (Unset unknown) = return $ ReplInfo [Message.error ("Invalid option: " ++ unknown)]

eval History = do
  env <- Repl.get
  return $ ReplInfo . map Message.info . reverse $ env.config.predefs

eval Reset = Repl.put ReplEnv.default >> return (ReplInfo [])
eval Version = return $ ReplInfo [Message.info version]
eval Help = return $ ReplInfo [Message.info (help cmdHelp)]
eval _ = return $ ReplInfo []

parseAndSetCompilerFlag flag =  do
  env <- Repl.get
  case flagtree.lookup flag of
    Just f -> do
      Repl.modify ReplEnv.{config <- InterpreterConfig.{compilerFlags <- f}}
      return $ ReplInfo []
    Nothing -> return $ ReplInfo [Message.error ("invalid flag " ++ flag)]

clearCompilerFlag flag = do
  Repl.modify ReplEnv.{config <- InterpreterConfig.{compilerFlags <- (\flags -> Flags.clrFlag flags flag)}}
  return $ ReplInfo []

setCompilerFlag flag = do
  Repl.modify ReplEnv.{config <- InterpreterConfig.{compilerFlags <- (\flags -> Flags.setFlag flags flag)}}
  return $ ReplInfo []

symbolsToReplInfo syms g = ReplInfo $ map (Message.info . showSymbol g) wantedSyms where
  wantedSyms = filter wanted syms
  wanted (sym :: Symbol)
    | sym.{alias?} = false
    | otherwise = true

java src = do
    env <- Repl.get
    let res = fst $ Interpreter.run (javaSource src) env.config env.state
    return $ either ReplInfo JavaSource res

slurp :: String -> IO (Message | Command)
slurp (urlSpec@'.*?://.*') = do
      url <- URL.new urlSpec
      script <- urlContents url
      return . Right $ LoadExternal urlSpec script
  `catch` handleIOE where
    handleIOE (ioe :: IOException) = return $ Left (Message.error (showThrowableCause ioe))
slurp filePath = do
   script <- fileContents filePath
   return . Right . LoadExternal filePath $ script
 `catch` handleIOE where
    handleIOE (ioe :: IOException) = return $ Left (Message.error (showThrowableCause ioe))

printMessages :: ReplIO a => a -> [Message] -> IO ()
printMessages console [] = return ()
printMessages console msgs = console.writeln $ Message.showMessages msgs

printSymbolType :: ReplIO a => a -> Global -> Symbol -> IO ()
printSymbolType console g sym = do
                        console.write ":: "
                        console.writeln (getSymbolType g sym)

readMultiline :: ReplIO a => a -> IO String
readMultiline console = intercalate newLine . reverse <$> f [] where
  f acc = do
    lineMaybe <- console.readline
    let line = maybe ":}" id lineMaybe
    if (line == ":}")
      then console.writeln "" >> return acc
      else f (line : acc)


cmdHelp = [
            ("Ctrl-L", "Load Frege code via file chooser dialog."),
            ("Ctrl-J", "Show last in history."),
            ("Ctrl-P", "Show previous in history."),
            ("Ctrl-N", "Show next in history."),
            ("Ctrl-B", "Bigger Font."),
            ("Ctrl-S", "Smaller Font."),
            (":t or :type <expression>", "Display the type of an expression."),
            (":browse <module name>", "Display the names in a module if " ++
                "a module name is provided otherwise display the names in the default REPL module."),
            (":load <url or file>", "Load Frege code snippets from an URL or file."),
            (":java", "View Java translation of last compiled Frege source."),
            (":r", "Reload the last url or file source."),
            (":history", "Display the source history for definitions in the default REPL module."),
            (":reset", "Reset the session discarding all evaluated scripts."),
            (":version", "Display Frege version."),
            (":{", "Start multiline definitions."),
            (":}", "End multiline definitions."),
            (":help <name>", "Display the documentation for the given name." ++
                            " If the name is not provided, display this help message."),
            (":q or :quit", "Quit REPL")]

renderCmdHelp cmdHelp = map render cmdHelp where
    maxLeftIndent = length . fst $ maximumBy (compare `on` (length . fst)) cmdHelp
    indent cmd desc width = cmd ++ (concat $ replicate (width - cmd.length) " ") ++
        " - " ++ desc
    render (cmd, desc) = indent cmd desc maxLeftIndent

help cmdHelp = intercalate newLine $ header ++ body where
    header = ["At the prompt, you can enter Frege code snippets to get them evaluated.",
            "The output or compilation errors will be printed below the prompt.",
            "In addition to Frege code, the following commands are supported:\n"]
    body = renderCmdHelp cmdHelp

data ConsoleReader = mutable native jline.console.ConsoleReader where
  native new :: () -> IO ConsoleReader throws IOException
              | String
                -> InputStream
                -> OutputStream
                -> Maybe Terminal
                -> String
                -> IO ConsoleReader
                throws IOException

  native readLine :: ConsoleReader -> String -> IO (Maybe String) throws IOException
                   | ConsoleReader -> IO (Maybe String) throws IOException
  native println :: ConsoleReader -> String -> IO () throws IOException
  native print :: ConsoleReader -> CharSequence -> IO () throws IOException
  native setPrompt :: ConsoleReader -> String -> IO ()
  native setExpandEvents :: ConsoleReader -> Bool -> IO ()

data Terminal = mutable native jline.Terminal

urlContents url = do
    inStream <- URL.openStream url
    scanner <- scannerFromInputStream inStream
    scanner.useDelimiter '\Z'
    scanner.next `finally` scanner.close

fileContents filePath = do
    file <- File.new filePath
    scanner <- Scanner.new file "utf-8"
    scanner.useDelimiter '\Z'
    scanner.next `finally` scanner.close

native scannerFromInputStream new :: InputStream -> IOMutable Scanner

-- todo: make javafx version
javaSourceGUI :: String -> IO ()
javaSourceGUI javaSource = do
   frame::JFrame <- JFrame.new "Java Source"
   newContentPane::JPanel <- BorderLayout.new () >>= JPanel.new
   frame.setDefaultCloseOperation JFrame.dispose_on_close
   editor::JEditorPane <- JEditorPane.new "text/plain" javaSource
   editor.setEditable false
   scrollPane <- JScrollPane.new editor
   dimension <- Dimension.new 600 600
   JComponent.setPreferredSize scrollPane dimension
   Container.add newContentPane scrollPane (asObject BorderLayout.center)
   frame.setContentPane newContentPane
   frame.pack
   frame.setVisible true

-- todo: make javafx version
helpGUI :: String -> String -> IO ()
helpGUI title content = do
    frame <- JFrame.new (title ++ " - Documentation")
    frame.setDefaultCloseOperation JFrame.dispose_on_close
    newContentPane:: JPanel <- BorderLayout.new () >>= JPanel.new
    let html :: String
        html
            | index >= 0 = substring content index  -- Skip DOCTYPE
            | otherwise = content
          where
            index = indexOf content "<HTML>"
    editor::JEditorPane <- JEditorPane.new "text/html" html
    editor.setEditable false
    helpLinksListener <- FregeJavaProxy.with showDesktop HyperlinkListener.clazz
    editor.addHyperlinkListener helpLinksListener
    scrollPane <- JScrollPane.new editor
    dimension <- Dimension.new 600 600
    JComponent.setPreferredSize scrollPane dimension
    Container.add newContentPane scrollPane (asObject BorderLayout.center)
    newContentPane.setOpaque true
    frame.setContentPane newContentPane
    frame.pack
    frame.setVisible true

data FregeJavaProxy = pure native frege.interpreter.javasupport.FregeJavaProxy where
  native with frege.interpreter.javasupport.FregeJavaProxy.with ::
    (Object -> Method -> JArray Object -> ST s a) -> Class c -> IO c

showDesktop :: Object -> Method -> JArray Object -> IO ()
showDesktop _ _ args = do
  event <- return $ asHyperlinkEvent $ args.elemAt 0
  d <- Desktop.getDesktop ()
  desktopSupported <- d.isDesktopSupported
  let url = HyperlinkEvent.getURL event
      navigateRelative = either throw d.browse . URI.new $ fixHelpLink event.getDescription
      navigate = maybe navigateRelative (\u -> toURI u >>= d.browse) url
  when (event.getEventType == HyperlinkEvent_EventType.activated) navigate

fixHelpLink s | Just (Just relative : _)
                  <- s `match` '^\.(.*)$' = "http://www.frege-lang.org/doc" ++ relative
fixHelpLink s = s

native toURI :: URL -> ST s URI throws URISyntaxException
pure native asObject "(java.lang.Object)" :: a -> Object


pure native isEmpty :: String -> Bool
pure native replaceAll :: String -> String -> String -> String
pure native indexOf :: String -> String -> Int
pure native substring :: String -> Int -> String
                         | String -> Int -> Int -> String

data Command =
  Version
  | Help
  | HelpDoc String
  | Browse
  | BrowseModule String
  | Type String
  | Load String
  | LoadExternal String String
  | Eval String
  | Java
  | Set String
  | Unset String
  | DefMulti
  | History
  | Reload
  | Reset
  | Skip
  | Quit where

    parse   :: String -> Either String Command
    parse s = parse' $ trim s where
        parse' "" = Right Skip
        parse' '^:' = parseCommand s
        parse' script = Right $ Eval script

    parseCommand s | Just (Just moduleName : _) <- s `match` ':browse\s+(.*)' = Right $ BrowseModule moduleName
    parseCommand s | Just (Just path : _) <- s `match` '^:l.*?\s+(.*)' = Right $ Load path
    parseCommand s | Just (Just src : _) <- s `match` ':help\s+(.*)' = Right $ HelpDoc src
    parseCommand s | Just (Just expr : _) <- s `match` '^:t.*?\s+(.*)' = Right $ Type expr
    parseCommand s | Just (Just option : _) <- s `match` ':set\s+(.*)' = Right $ Set option
    parseCommand s | Just (Just option : _) <- s `match` ':unset\s+(.*)' = Right $ Unset option
    parseCommand  ":version" = Right Version
    parseCommand ":browse" = Right $ Browse
    parseCommand ":{" = Right DefMulti
    parseCommand ":history" = Right History
    parseCommand ":java" = Right Java
    parseCommand ":r" = Right Reload
    parseCommand ":reset" = Right Reset
    parseCommand ":q" = Right Quit
    parseCommand ":quit" = Right Quit
    parseCommand ":help" = Right Help
    parseCommand otherwise = Left "Invalid Command"

derive Eq Command
derive Show Command

vmVendor = maybe "" id $ System.getProperty "java.vm.vendor"
vmName = maybe "" id $ System.getProperty "java.vm.name"
javaVersion = maybe "" id $ System.getProperty "java.version"

pure native toString :: Object -> String
pure native trim :: String -> String
native sysin "java.lang.System.in" :: InputStream

welcome = "Welcome to Frege " ++ version ++ " (" ++ vmVendor ++ " " ++ vmName ++
    ", " ++ javaVersion ++ ")"

class ReplIO a where
  readline :: a -> IO (Maybe String)
  write :: a -> String -> IO ()
  writeln :: a -> String -> IO ()
  interpretSym :: a -> Global -> Symbol -> ReplEnv -> IO ()

instance ReplIO ConsoleReader where
  readline console = try ConsoleReader.readLine console `catch` (\(ioe :: IOException) -> return Nothing)
  write console s = try (flip ConsoleReader.print (CharSequence.fromString s)) console
                      `catch` (\(ioe :: IOException) -> return ())
  writeln console s = try (flip ConsoleReader.println s) console
                        `catch` (\(ioe :: IOException) -> return ())
  interpretSym console g sym env =
    do
      valMaybe <- fieldValue (symbolClass sym g) (symbolVar sym g) env.state.classLoader
      console.writeln $ maybe "undefined" id valMaybe
    `catch` (console.writeln . showThrowableCause)


data ReaderWriterConsole = ReaderWriterConsole {input :: BufferedReader, output :: PrintWriter}

instance ReplIO ReaderWriterConsole where
  readline console = try f console `catch` (\(ioe :: IOException) -> return Nothing) where
    f console = do
     console.write "frege> "
     console.output.flush
     line <- console.input.getLine
     return $ Just line
  write console s = try (\c -> c.output.print s) console
                      `catch` (\(ioe :: IOException) -> return ())
  writeln console s = try (\c -> c.output.println s) console
                      `catch` (\(ioe :: IOException) -> return ())
  interpretSym console g sym env =
    do
      valMaybe <- fieldValue (symbolClass sym g) (symbolVar sym g) env.state.classLoader
      console.writeln $ maybe "undefined" id valMaybe
    `catch` (console.writeln . showThrowableCause)




interpreterPreludeImport = ImpDcl {pos=Position.null, pack="frege.repl.PreludeRepl", as=Nothing, imports = linkAll}

preludeHidingImport = ImpDcl {
  pos = Position.null,
  pack = "frege.Prelude",
  as = Nothing,
  imports = Imports {
              publik = false,
              except = true,
              items = [
                fnImport "getLine", fnImport "getChar", fnImport "getContents"
              ]
            }
} where
  fnImport name = Item {publik = false, name = fn name, members = Nothing, alias=""}
  fn name = Simple {id = Token VARID name 1 0 0 []}

transformDefs defs = do
  uniqdefs <- removeDuplicateDefs defs
  return (interpreterPreludeImport : preludeHidingImport : uniqdefs)


data GraphicRepl = GraphicRepl {input :: (MVar String), inputArea :: IO (MVar TextArea), outputArea :: IO (MVar TextArea)}

instance ReplIO GraphicRepl where

  readline console = try f console `catch` (\(ioe :: IOException) -> return Nothing) where
    f console = do
     line <- MVar.take console.input
     return $ Just line

  writeln console s = write console (s ++ "\n" )

  write   console s = do
    foo <- console.outputArea
    out <- foo.poll
    case out of
        Nothing = error "there is no output area in the console"
        Just x = do
            r <- Runnable.new (x.appendText s)
            Platform.runLater r

  interpretSym console g sym env =
    do
      stdoutWriter <- StringWriter.new ()
      stderrWriter <- StringWriter.new ()
      foo <- console.inputArea
      inArea <- foo.poll
      stdinText <- case inArea of
          Nothing = error "there is no input area in the console"
          Just x  = x.getText
      valMaybe <- fieldValueWithRuntime (symbolClass sym g) (symbolVar sym g) stdinText stdoutWriter stderrWriter env.state.classLoader
      console.writeln $ maybe "undefined" id valMaybe
      out <- stdoutWriter.toString
      err <- stderrWriter.toString
      when (not $ null out) $ console.writeln out
      when (not $ null err) $ console.writeln err
    `catch` (console.writeln . showThrowableCause)


readResourceAsString :: String -> IO String
readResourceAsString fileName = do
  cl <- ClassLoader.current
  is <- getResourceAsStream cl fileName
  isr <- InputStreamReader.new is "UTF-8"
  BufferedReader.new isr >>= getContentsOf

native getResourceAsStream :: ClassLoader -> String -> IO InputStream





