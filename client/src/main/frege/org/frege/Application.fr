module org.frege.Application where

import frege.Prelude hiding (print, ListView)

import frege.repl.FregeRepl hiding (main, cmdHelp, javaSourceGUI, helpGUI, repl, loop)

import Interpreter.FregeInterpreter
import Control.Concurrent as C
import Data.List

import org.frege.JavaFX
import org.frege.AllNodes

import fregefx.javafx.application.Platform
import fregefx.javafx.fxml.FXMLLoader
import fregefx.javafx.stage.Stage
import fregefx.javafx.scene.Scene
import fregefx.javafx.scene.Node
import fregefx.javafx.scene.Parent
import fregefx.javafx.event.Event
import fregefx.javafx.scene.input.KeyEvent
import fregefx.javafx.scene.input.KeyCode
import fregefx.javafx.scene.text.Font
import fregefx.javafx.scene.control.Button
import fregefx.javafx.scene.control.TextArea
import fregefx.javafx.scene.control.TextInputControl
import fregefx.javafx.stage.WindowEvent
import fregefx.javafx.event.EventHandler
import fregefx.javafx.collections.ObservableList

import fregefx.javafx.scene.web.WebView
import fregefx.javafx.scene.web.WebEngine

main args = do
    mConsole <- MVar.newEmpty            -- for thread coordination, set in showUI thread, start repl when ready
    async do                             -- JavaFX would block the main thread otherwise after launching the UI thread
        FregeFX.launch (showUI mConsole) -- partially applied callback function for the JavaFX starting mechanism
    console <- mConsole.take             -- proceeding in the main thread, wait until console is available
    startRepl console                    -- going into the endless repl loop

showUI :: (MVar GraphicRepl) -> Stage -> IO ()
showUI mConsole stage = do
    content <- fxml "/fregeRepl.fxml"
    scene   <- Scene.new content 800.0 540.0
    stage.setTitle "Frege - purely functional programming for the JVM"
    stage.setScene scene
    Stage.show stage
    inputArea  <- locateTextArea scene "#editor"
    outputArea <- locateTextArea scene "#repl"
    historyLV  <- locateListView scene "#historyList"

    items <- historyLV.getItems
    items.add ":help mapM"
    items.add ":type mapM"
    items.add "mapM println [1..100]"
    items.add "fib = 1n : 1n : zipWith (+) fib (tail fib)"
    items.add ":l https://raw.githubusercontent.com/Dierk/frepl-gui/master/Stairs.fr"
    items.add "import Stairs"
    items.add "paint (\\ctx -> sequence_ $ take 500 $ doodle ctx)"

    sm  <- historyLV.getSelectionModel
    sip <- sm.selectedItemProperty
    cl  <- OnChange.new $ \old \new -> inputArea.setText new
    sip.addListener cl

    mQueue <- newEmptyMVar
    onClosing mQueue >>= stage.setOnHidden

    keyReleasedHandler <- onKeyReleased mQueue stage inputArea outputArea items sm
    scene.setOnKeyReleased  keyReleasedHandler

    mIn  = newMVar inputArea
    mOut = newMVar outputArea
    console = GraphicRepl mQueue mIn mOut
    mConsole.put console     -- allow the main thread to proceed
    console.writeln welcome
    console.write $ "Press Enter to submit.\n" ++ "Ctrl-I for more information (Mac: Cmd-I)."
    mQueue.put "\"\"" -- evaluate an empty string to hide the initialization time

fxml = FregeFX.fxml "org.frege.Application"

startRepl :: GraphicRepl -> IO ()
startRepl console = do
    env <- ReplEnv.default
    preludeScript <- readResourceAsString "PreludeRepl.fr"
    newState <- snd <$> Interpreter.run (interpret preludeScript) env.config env.state
    repl console env.{state=newState} -- first step in endless loop
    return ()

onClosing :: MVar String -> IO (EventHandler t)
onClosing mQueue = OnEvent.new handle where
    handle windowEvent = do
        shutdown -- closing the executor service - just to be clean
        mQueue.put ":q"

onKeyReleased :: MVar String -> Stage -> TextArea -> TextArea -> (ObservableList String) -> (SelectionModel t) -> IO (EventHandler KeyEvent)
onKeyReleased mQueue stage inputArea outputArea items historySelection = OnEvent.new handleKeyEvent where
    handleKeyEvent keyEvent = do
--        println . show =<< keyEvent.toString
        char <- keyEvent.getText
        scut <- keyEvent.isShortcutDown   -- Ctrl on Windows, Cmd on Mac
        ctrl <- keyEvent.isControlDown
        shft <- keyEvent.isShiftDown
        if shft then return () else -- when shift is pressed, we do nothing extra
            if (scut || ctrl) -- we have any shortcut key
            then case char of
                "\015" -> textInsert inputArea "\n"
                "l"    -> loadFile stage inputArea
                "b"    -> biggerFont  inputArea outputArea
                "s"    -> smallerFont inputArea outputArea
                "w"    -> outputArea.setText ""
                "i"    -> myInfoGUI cmdHelp
                _      -> return ()
            else do
                code <- keyEvent.getCode
  --            println . show $ code.getName
                keyEvent.consume
                case code.getName of
                     "Down"  -> selectNext     items historySelection
                     "Up"    -> selectPrevious items historySelection
                     "Enter" -> doExecute mQueue inputArea items historySelection
                     _       -> return ()

textInsert :: TextArea -> String -> IO ()
textInsert inputArea text = do
    pos <- inputArea.getCaretPosition
    inputArea.insertText pos text

doExecute :: MVar String ->TextArea -> (ObservableList String) -> (SelectionModel t) -> IO ()
doExecute mQueue inputArea items historySelection = do
    pos       <- inputArea.getCaretPosition -- when we get here, we have just entered a CR
    scriptStr <- inputArea.getText
    script    =  if pos > 0 && pos < length scriptStr
        then take (pos-1) scriptStr ++ drop pos scriptStr -- remove CR from input
        else scriptStr
    when (not . null $ trim script) $ do
        scriptLines = if 1 == length (filter (not . null) (lines script))
           then [trim script]
           else [":{"] ++ lines script ++ [":}"]
        mapM mQueue.put scriptLines                 -- the beef
        items.remove $ trim script
        items.add    $ trim script
        historySelection.clearSelection
        inputArea.setText ""
    when (script == ":q") $ System.exit 0

loadFile :: Stage -> TextArea -> IO ()
loadFile stage inputArea = do
    chooser <- FileChooser.new ()
    chooser.setTitle "Load Frege File"
    maybeFile <- chooser.showOpenDialog stage
    case maybeFile of
        Nothing      = return ()
        Just mIoFile = do
            path <- mIoFile.getPath
            inputArea.setText (":l " ++ path)

selectPrevious :: (ObservableList e) -> (SelectionModel t) -> IO ()
selectPrevious items historySelection = do
    oldIndex <- historySelection.getSelectedIndex
    listSize <- items.size
    temp     = oldIndex - 1
    newIndex = if temp < 0 then listSize - 1 else temp
    historySelection.clearAndSelect newIndex

selectNext :: (ObservableList e) -> (SelectionModel t) -> IO ()
selectNext items historySelection = do
    oldIndex <- historySelection.getSelectedIndex
    listSize <- items.size
    temp     = oldIndex + 1
    newIndex = if temp >= listSize then 0 else temp
    historySelection.clearAndSelect newIndex

biggerFont :: TextArea -> TextArea -> IO ()
biggerFont inputArea outputArea = do
    oldFont <- inputArea.getFont
    oldSize <- oldFont.getSize
    newFont <- Font.new (oldSize + 2)
    inputArea.setFont newFont
    outputArea.setFont newFont

smallerFont :: TextArea -> TextArea -> IO ()
smallerFont inputArea outputArea = do
    oldFont <- inputArea.getFont
    oldSize <- oldFont.getSize
    newFont <- Font.new $ if oldSize < 3 then 2 else (oldSize - 2)
    inputArea.setFont newFont
    outputArea.setFont newFont

helpEntries = [
    ("Enter        ", "Execute"),
    ("Up           ", "Show previous in history."),
    ("Down         ", "Show next in history."),
    ("Ctrl-L       ", "Load Frege code via file chooser dialog."),
    ("Ctrl-B       ", "Bigger font."),
    ("Ctrl-S       ", "Smaller font."),
    ("Ctrl-W       ", "Wipe output area."),
    ("Ctrl-I       ", "Show this information."),
    ("Ctrl-Enter   ", "Insert line feed."),
    (":java        ", "View Java translation of last compiled Frege source."),
    (":r           ", "Reload the last url or file source."),
    (":history     ", "Display the source history for definitions in the default REPL module."),
    (":reset       ", "Reset the session discarding all evaluated scripts."),
    (":version     ", "Display Frege version."),
    (":help [name] ", "Display the documentation for the given name. " ++
                      "If the name is not provided, display a help message."),
    (":set <flag>   ", "Set one of the compiler flags v, hints, nowarn, inline, O, comments, ascii, greek, fraktur, latin."),
    (":unset <flag> ", "Unset one of the compiler flags."),
    (":q or :quit  ", "Quit REPL"),
    (":t or :type <expression> ", "Display the type of an expression."),
    (":browse <module name>    ", "Display the names in a module if " ++
                                  "a module name is provided otherwise display the names in the default REPL module."),
    (":load <url or file>      ", "Load Frege code snippets from a URL or file.")]

cmdHelp =
    "<table><tbody>" ++
    (fold (\str \(k,v) -> str ++ "<tr><td nowrap>"++ k ++"</td><td>"++ v ++ "</td></tr>") "" helpEntries ) ++
    "</tbody></table>"

myInfoGUI :: String -> IO ()
myInfoGUI source = monolog "Help Information" ("<html>" ++ source ++ "</html>")

myJavaSourceGUI :: String -> IO ()
myJavaSourceGUI javaSource = monolog "Java Source" ("<html><pre>" ++ javaSource)

myHelpGUI :: String -> String -> IO ()
myHelpGUI title content = monolog title rel2absolute where
    rel2absolute = (´href="\.\/´.matcher content).replaceAll "href=\"http://www.frege-lang.org/doc/"

monolog :: String -> String -> IO ()
monolog title content =
    withUI do
        webView <- WebView.new ()
        webView.getEngine >>= _.loadContent content
        scene <- Scene.new webView 600.0 600.0
        stage <- Stage.new ()
        stage.setTitle title
        stage.setScene scene
        stage.show

withUI f = Platform.runLater =<< Runnable.new f

data GraphicRepl = GraphicRepl {input :: (MVar String), inputArea :: IO (MVar TextArea), outputArea :: IO (MVar TextArea)}

instance ReplIO GraphicRepl where

  readline console prompt = try f console `catch` (\(ioe :: IOException) -> return Nothing) where
    f console = do
     line <- MVar.take console.input
     return $ Just line

  writeln console s = write console (chomp s ++ "\n" )

  write   console s = do
    out <- console.outputArea >>= _.poll
    case out of
        Nothing   = error "there is no output area in the console"
        Just area = withUI $ area.appendText s

  interpretSym console g sym env =
    do
      stdoutWriter <- StringWriter.new ()
      stderrWriter <- StringWriter.new ()
      inArea <- console.inputArea >>= _.poll
      stdinText <- case inArea of
          Nothing    = error "there is no input area in the console"
          Just area  = area.getText
      valMaybe <- fieldValueWithRuntime (symbolClass sym g) (symbolVar sym g) stdinText stdoutWriter stderrWriter env.state
      case valMaybe of
          Nothing  = console.writeln "undefined return value"
          Just val = when (not $ null val) $ console.writeln ("result: "++ val)
      out <- stdoutWriter.toString
      err <- stderrWriter.toString
      when (not $ null out) $ console.write out
      when (not $ null err) $ console.write err
    `catch` (console.writeln . showThrowableCause)



-- --------- shadowed from repl-core in order to call local adaptions ---------

repl :: ReplIO a => a -> ReplEnv -> IO ()
repl console env = do
  cmd <- read console env
  (res, newEnv) <- Repl.run (eval cmd) env
  myprint console cmd res newEnv
  loop    console cmd res newEnv

loop :: ReplIO a => a -> Command -> ReplResult -> ReplEnv -> IO ()
loop console Quit  _ _ = return ()
loop console Reset _ env = repl console env
loop console _     _ env = repl console env

myprint :: ReplIO a => a -> Command -> ReplResult -> ReplEnv -> IO ()
myprint _  Java           (JavaSource src) _   = myJavaSourceGUI src
myprint _  (HelpDoc src)  (DocHelp doc)    _   = if null doc then return () else myHelpGUI src doc
myprint a  b              c                d   = print a b c d


